// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discordproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscordClient is the client API for Discord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordClient interface {
	SendMsgToChannel(ctx context.Context, in *SendMsgToChannelRequest, opts ...grpc.CallOption) (*SendMsgToChannelResponse, error)
	SendBatchMsgToChannel(ctx context.Context, in *SendBatchMsgToChannelRequest, opts ...grpc.CallOption) (*SendBatchMsgToChannelResponse, error)
	SendMsgToPrivateChannel(ctx context.Context, in *SendMsgToPrivateChannelRequest, opts ...grpc.CallOption) (*SendMsgToPrivateChannelResponse, error)
	ReadUserRoles(ctx context.Context, in *ReadUserRolesRequest, opts ...grpc.CallOption) (*ReadUserRolesResponse, error)
	UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error)
	RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error)
	ReadMessageReactions(ctx context.Context, in *ReadMessageReactionsRequest, opts ...grpc.CallOption) (*ReadMessageReactionsResponse, error)
}

type discordClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordClient(cc grpc.ClientConnInterface) DiscordClient {
	return &discordClient{cc}
}

func (c *discordClient) SendMsgToChannel(ctx context.Context, in *SendMsgToChannelRequest, opts ...grpc.CallOption) (*SendMsgToChannelResponse, error) {
	out := new(SendMsgToChannelResponse)
	err := c.cc.Invoke(ctx, "/discord/SendMsgToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) SendBatchMsgToChannel(ctx context.Context, in *SendBatchMsgToChannelRequest, opts ...grpc.CallOption) (*SendBatchMsgToChannelResponse, error) {
	out := new(SendBatchMsgToChannelResponse)
	err := c.cc.Invoke(ctx, "/discord/SendBatchMsgToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) SendMsgToPrivateChannel(ctx context.Context, in *SendMsgToPrivateChannelRequest, opts ...grpc.CallOption) (*SendMsgToPrivateChannelResponse, error) {
	out := new(SendMsgToPrivateChannelResponse)
	err := c.cc.Invoke(ctx, "/discord/SendMsgToPrivateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ReadUserRoles(ctx context.Context, in *ReadUserRolesRequest, opts ...grpc.CallOption) (*ReadUserRolesResponse, error) {
	out := new(ReadUserRolesResponse)
	err := c.cc.Invoke(ctx, "/discord/ReadUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) UpdateUserRoles(ctx context.Context, in *UpdateUserRolesRequest, opts ...grpc.CallOption) (*UpdateUserRolesResponse, error) {
	out := new(UpdateUserRolesResponse)
	err := c.cc.Invoke(ctx, "/discord/UpdateUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) RemoveUserRole(ctx context.Context, in *RemoveUserRoleRequest, opts ...grpc.CallOption) (*RemoveUserRoleResponse, error) {
	out := new(RemoveUserRoleResponse)
	err := c.cc.Invoke(ctx, "/discord/RemoveUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordClient) ReadMessageReactions(ctx context.Context, in *ReadMessageReactionsRequest, opts ...grpc.CallOption) (*ReadMessageReactionsResponse, error) {
	out := new(ReadMessageReactionsResponse)
	err := c.cc.Invoke(ctx, "/discord/ReadMessageReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServer is the server API for Discord service.
// All implementations must embed UnimplementedDiscordServer
// for forward compatibility
type DiscordServer interface {
	SendMsgToChannel(context.Context, *SendMsgToChannelRequest) (*SendMsgToChannelResponse, error)
	SendBatchMsgToChannel(context.Context, *SendBatchMsgToChannelRequest) (*SendBatchMsgToChannelResponse, error)
	SendMsgToPrivateChannel(context.Context, *SendMsgToPrivateChannelRequest) (*SendMsgToPrivateChannelResponse, error)
	ReadUserRoles(context.Context, *ReadUserRolesRequest) (*ReadUserRolesResponse, error)
	UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error)
	RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*RemoveUserRoleResponse, error)
	ReadMessageReactions(context.Context, *ReadMessageReactionsRequest) (*ReadMessageReactionsResponse, error)
	mustEmbedUnimplementedDiscordServer()
}

// UnimplementedDiscordServer must be embedded to have forward compatible implementations.
type UnimplementedDiscordServer struct {
}

func (*UnimplementedDiscordServer) SendMsgToChannel(context.Context, *SendMsgToChannelRequest) (*SendMsgToChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgToChannel not implemented")
}
func (*UnimplementedDiscordServer) SendBatchMsgToChannel(context.Context, *SendBatchMsgToChannelRequest) (*SendBatchMsgToChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatchMsgToChannel not implemented")
}
func (*UnimplementedDiscordServer) SendMsgToPrivateChannel(context.Context, *SendMsgToPrivateChannelRequest) (*SendMsgToPrivateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsgToPrivateChannel not implemented")
}
func (*UnimplementedDiscordServer) ReadUserRoles(context.Context, *ReadUserRolesRequest) (*ReadUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserRoles not implemented")
}
func (*UnimplementedDiscordServer) UpdateUserRoles(context.Context, *UpdateUserRolesRequest) (*UpdateUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoles not implemented")
}
func (*UnimplementedDiscordServer) RemoveUserRole(context.Context, *RemoveUserRoleRequest) (*RemoveUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserRole not implemented")
}
func (*UnimplementedDiscordServer) ReadMessageReactions(context.Context, *ReadMessageReactionsRequest) (*ReadMessageReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessageReactions not implemented")
}
func (*UnimplementedDiscordServer) mustEmbedUnimplementedDiscordServer() {}

func RegisterDiscordServer(s *grpc.Server, srv DiscordServer) {
	s.RegisterService(&_Discord_serviceDesc, srv)
}

func _Discord_SendMsgToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).SendMsgToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/SendMsgToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).SendMsgToChannel(ctx, req.(*SendMsgToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_SendBatchMsgToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBatchMsgToChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).SendBatchMsgToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/SendBatchMsgToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).SendBatchMsgToChannel(ctx, req.(*SendBatchMsgToChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_SendMsgToPrivateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgToPrivateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).SendMsgToPrivateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/SendMsgToPrivateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).SendMsgToPrivateChannel(ctx, req.(*SendMsgToPrivateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ReadUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ReadUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/ReadUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ReadUserRoles(ctx, req.(*ReadUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_UpdateUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).UpdateUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/UpdateUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).UpdateUserRoles(ctx, req.(*UpdateUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_RemoveUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).RemoveUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/RemoveUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).RemoveUserRole(ctx, req.(*RemoveUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discord_ReadMessageReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessageReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServer).ReadMessageReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discord/ReadMessageReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServer).ReadMessageReactions(ctx, req.(*ReadMessageReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Discord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discord",
	HandlerType: (*DiscordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsgToChannel",
			Handler:    _Discord_SendMsgToChannel_Handler,
		},
		{
			MethodName: "SendBatchMsgToChannel",
			Handler:    _Discord_SendBatchMsgToChannel_Handler,
		},
		{
			MethodName: "SendMsgToPrivateChannel",
			Handler:    _Discord_SendMsgToPrivateChannel_Handler,
		},
		{
			MethodName: "ReadUserRoles",
			Handler:    _Discord_ReadUserRoles_Handler,
		},
		{
			MethodName: "UpdateUserRoles",
			Handler:    _Discord_UpdateUserRoles_Handler,
		},
		{
			MethodName: "RemoveUserRole",
			Handler:    _Discord_RemoveUserRole_Handler,
		},
		{
			MethodName: "ReadMessageReactions",
			Handler:    _Discord_ReadMessageReactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.discord/proto/discord.proto",
}
