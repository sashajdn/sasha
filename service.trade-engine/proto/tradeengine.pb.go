// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: service.trade-engine/proto/tradeengine.proto

package tradeengineproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VENUE int32

const (
	VENUE_UNREQUIRED VENUE = 0
	VENUE_DERIBIT    VENUE = 3
	VENUE_BITFINEX   VENUE = 4
)

// Enum value maps for VENUE.
var (
	VENUE_name = map[int32]string{
		0: "UNREQUIRED",
		3: "DERIBIT",
		4: "BITFINEX",
	}
	VENUE_value = map[string]int32{
		"UNREQUIRED": 0,
		"DERIBIT":    3,
		"BITFINEX":   4,
	}
)

func (x VENUE) Enum() *VENUE {
	p := new(VENUE)
	*p = x
	return p
}

func (x VENUE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VENUE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[0].Descriptor()
}

func (VENUE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[0]
}

func (x VENUE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VENUE.Descriptor instead.
func (VENUE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{0}
}

type ACTOR_TYPE int32

const (
	ACTOR_TYPE_AUTOMATED ACTOR_TYPE = 0
	ACTOR_TYPE_MANUAL    ACTOR_TYPE = 1
	ACTOR_TYPE_INTERNAL  ACTOR_TYPE = 2
	ACTOR_TYPE_EXTERNAL  ACTOR_TYPE = 3
)

// Enum value maps for ACTOR_TYPE.
var (
	ACTOR_TYPE_name = map[int32]string{
		0: "AUTOMATED",
		1: "MANUAL",
		2: "INTERNAL",
		3: "EXTERNAL",
	}
	ACTOR_TYPE_value = map[string]int32{
		"AUTOMATED": 0,
		"MANUAL":    1,
		"INTERNAL":  2,
		"EXTERNAL":  3,
	}
)

func (x ACTOR_TYPE) Enum() *ACTOR_TYPE {
	p := new(ACTOR_TYPE)
	*p = x
	return p
}

func (x ACTOR_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTOR_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[1].Descriptor()
}

func (ACTOR_TYPE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[1]
}

func (x ACTOR_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTOR_TYPE.Descriptor instead.
func (ACTOR_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{1}
}

type TRADE_SIDE int32

const (
	TRADE_SIDE_BUY   TRADE_SIDE = 0
	TRADE_SIDE_SELL  TRADE_SIDE = 1
	TRADE_SIDE_LONG  TRADE_SIDE = 2
	TRADE_SIDE_SHORT TRADE_SIDE = 3
)

// Enum value maps for TRADE_SIDE.
var (
	TRADE_SIDE_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "LONG",
		3: "SHORT",
	}
	TRADE_SIDE_value = map[string]int32{
		"BUY":   0,
		"SELL":  1,
		"LONG":  2,
		"SHORT": 3,
	}
)

func (x TRADE_SIDE) Enum() *TRADE_SIDE {
	p := new(TRADE_SIDE)
	*p = x
	return p
}

func (x TRADE_SIDE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_SIDE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[2].Descriptor()
}

func (TRADE_SIDE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[2]
}

func (x TRADE_SIDE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_SIDE.Descriptor instead.
func (TRADE_SIDE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{2}
}

type ORDER_STATUS int32

const (
	ORDER_STATUS_PENDING_NEW_ORDER      ORDER_STATUS = 0
	ORDER_STATUS_NEW_ORDER              ORDER_STATUS = 1
	ORDER_STATUS_PENDING_CANCEL_ORDER   ORDER_STATUS = 2
	ORDER_STATUS_CANCELLED_ORDER        ORDER_STATUS = 3
	ORDER_STATUS_PARTIALLY_FILLED_ORDER ORDER_STATUS = 4
	ORDER_STATUS_FILLED_ORDER           ORDER_STATUS = 5
	ORDER_STATUS_REJECTED               ORDER_STATUS = 6
	ORDER_STATUS_EXPIRED                ORDER_STATUS = 7
)

// Enum value maps for ORDER_STATUS.
var (
	ORDER_STATUS_name = map[int32]string{
		0: "PENDING_NEW_ORDER",
		1: "NEW_ORDER",
		2: "PENDING_CANCEL_ORDER",
		3: "CANCELLED_ORDER",
		4: "PARTIALLY_FILLED_ORDER",
		5: "FILLED_ORDER",
		6: "REJECTED",
		7: "EXPIRED",
	}
	ORDER_STATUS_value = map[string]int32{
		"PENDING_NEW_ORDER":      0,
		"NEW_ORDER":              1,
		"PENDING_CANCEL_ORDER":   2,
		"CANCELLED_ORDER":        3,
		"PARTIALLY_FILLED_ORDER": 4,
		"FILLED_ORDER":           5,
		"REJECTED":               6,
		"EXPIRED":                7,
	}
)

func (x ORDER_STATUS) Enum() *ORDER_STATUS {
	p := new(ORDER_STATUS)
	*p = x
	return p
}

func (x ORDER_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORDER_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[3].Descriptor()
}

func (ORDER_STATUS) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[3]
}

func (x ORDER_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORDER_STATUS.Descriptor instead.
func (ORDER_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{3}
}

type TRADE_STRATEGY_STATUS int32

const (
	TRADE_STRATEGY_STATUS_NEW       TRADE_STRATEGY_STATUS = 0
	TRADE_STRATEGY_STATUS_ACTIVE    TRADE_STRATEGY_STATUS = 1
	TRADE_STRATEGY_STATUS_COMPLETE  TRADE_STRATEGY_STATUS = 2
	TRADE_STRATEGY_STATUS_CANCELLED TRADE_STRATEGY_STATUS = 3
)

// Enum value maps for TRADE_STRATEGY_STATUS.
var (
	TRADE_STRATEGY_STATUS_name = map[int32]string{
		0: "NEW",
		1: "ACTIVE",
		2: "COMPLETE",
		3: "CANCELLED",
	}
	TRADE_STRATEGY_STATUS_value = map[string]int32{
		"NEW":       0,
		"ACTIVE":    1,
		"COMPLETE":  2,
		"CANCELLED": 3,
	}
)

func (x TRADE_STRATEGY_STATUS) Enum() *TRADE_STRATEGY_STATUS {
	p := new(TRADE_STRATEGY_STATUS)
	*p = x
	return p
}

func (x TRADE_STRATEGY_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_STRATEGY_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[4].Descriptor()
}

func (TRADE_STRATEGY_STATUS) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[4]
}

func (x TRADE_STRATEGY_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_STRATEGY_STATUS.Descriptor instead.
func (TRADE_STRATEGY_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{4}
}

type INSTRUMENT_TYPE int32

const (
	INSTRUMENT_TYPE_SPOT             INSTRUMENT_TYPE = 0
	INSTRUMENT_TYPE_FUTURE_PERPETUAL INSTRUMENT_TYPE = 1
	INSTRUMENT_TYPE_FUTURE           INSTRUMENT_TYPE = 2
	INSTRUMENT_TYPE_OPTION           INSTRUMENT_TYPE = 3
	INSTRUMENT_TYPE_FORWARD          INSTRUMENT_TYPE = 4
	INSTRUMENT_TYPE_MOVE             INSTRUMENT_TYPE = 5
)

// Enum value maps for INSTRUMENT_TYPE.
var (
	INSTRUMENT_TYPE_name = map[int32]string{
		0: "SPOT",
		1: "FUTURE_PERPETUAL",
		2: "FUTURE",
		3: "OPTION",
		4: "FORWARD",
		5: "MOVE",
	}
	INSTRUMENT_TYPE_value = map[string]int32{
		"SPOT":             0,
		"FUTURE_PERPETUAL": 1,
		"FUTURE":           2,
		"OPTION":           3,
		"FORWARD":          4,
		"MOVE":             5,
	}
)

func (x INSTRUMENT_TYPE) Enum() *INSTRUMENT_TYPE {
	p := new(INSTRUMENT_TYPE)
	*p = x
	return p
}

func (x INSTRUMENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INSTRUMENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[5].Descriptor()
}

func (INSTRUMENT_TYPE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[5]
}

func (x INSTRUMENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INSTRUMENT_TYPE.Descriptor instead.
func (INSTRUMENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{5}
}

type TRADE_PAIR int32

const (
	TRADE_PAIR_USDT TRADE_PAIR = 0
	TRADE_PAIR_USD  TRADE_PAIR = 1
	TRADE_PAIR_BTC  TRADE_PAIR = 2
	TRADE_PAIR_USDC TRADE_PAIR = 3
	TRADE_PAIR_ETH  TRADE_PAIR = 4
)

// Enum value maps for TRADE_PAIR.
var (
	TRADE_PAIR_name = map[int32]string{
		0: "USDT",
		1: "USD",
		2: "BTC",
		3: "USDC",
		4: "ETH",
	}
	TRADE_PAIR_value = map[string]int32{
		"USDT": 0,
		"USD":  1,
		"BTC":  2,
		"USDC": 3,
		"ETH":  4,
	}
)

func (x TRADE_PAIR) Enum() *TRADE_PAIR {
	p := new(TRADE_PAIR)
	*p = x
	return p
}

func (x TRADE_PAIR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_PAIR) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[6].Descriptor()
}

func (TRADE_PAIR) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[6]
}

func (x TRADE_PAIR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_PAIR.Descriptor instead.
func (TRADE_PAIR) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{6}
}

type ORDER_TYPE int32

const (
	ORDER_TYPE_LIMIT                ORDER_TYPE = 0
	ORDER_TYPE_MARKET               ORDER_TYPE = 1
	ORDER_TYPE_STOP_MARKET          ORDER_TYPE = 2
	ORDER_TYPE_STOP_LIMIT           ORDER_TYPE = 3
	ORDER_TYPE_TAKE_PROFIT_MARKET   ORDER_TYPE = 4
	ORDER_TYPE_TAKE_PROFIT_LIMIT    ORDER_TYPE = 5
	ORDER_TYPE_TRAILING_STOP_MARKET ORDER_TYPE = 6
)

// Enum value maps for ORDER_TYPE.
var (
	ORDER_TYPE_name = map[int32]string{
		0: "LIMIT",
		1: "MARKET",
		2: "STOP_MARKET",
		3: "STOP_LIMIT",
		4: "TAKE_PROFIT_MARKET",
		5: "TAKE_PROFIT_LIMIT",
		6: "TRAILING_STOP_MARKET",
	}
	ORDER_TYPE_value = map[string]int32{
		"LIMIT":                0,
		"MARKET":               1,
		"STOP_MARKET":          2,
		"STOP_LIMIT":           3,
		"TAKE_PROFIT_MARKET":   4,
		"TAKE_PROFIT_LIMIT":    5,
		"TRAILING_STOP_MARKET": 6,
	}
)

func (x ORDER_TYPE) Enum() *ORDER_TYPE {
	p := new(ORDER_TYPE)
	*p = x
	return p
}

func (x ORDER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORDER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[7].Descriptor()
}

func (ORDER_TYPE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[7]
}

func (x ORDER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORDER_TYPE.Descriptor instead.
func (ORDER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{7}
}

type TIME_IN_FORCE int32

const (
	TIME_IN_FORCE_TIME_IN_FORCE_UNREQUIRED TIME_IN_FORCE = 0
	TIME_IN_FORCE_GOOD_TILL_CANCELLED      TIME_IN_FORCE = 1
	TIME_IN_FORCE_IMMEDIATE_OR_CANCEL      TIME_IN_FORCE = 2
	TIME_IN_FORCE_FILL_OR_KILL             TIME_IN_FORCE = 3
	TIME_IN_FORCE_GOOD_TILL_CROSSING       TIME_IN_FORCE = 4
)

// Enum value maps for TIME_IN_FORCE.
var (
	TIME_IN_FORCE_name = map[int32]string{
		0: "TIME_IN_FORCE_UNREQUIRED",
		1: "GOOD_TILL_CANCELLED",
		2: "IMMEDIATE_OR_CANCEL",
		3: "FILL_OR_KILL",
		4: "GOOD_TILL_CROSSING",
	}
	TIME_IN_FORCE_value = map[string]int32{
		"TIME_IN_FORCE_UNREQUIRED": 0,
		"GOOD_TILL_CANCELLED":      1,
		"IMMEDIATE_OR_CANCEL":      2,
		"FILL_OR_KILL":             3,
		"GOOD_TILL_CROSSING":       4,
	}
)

func (x TIME_IN_FORCE) Enum() *TIME_IN_FORCE {
	p := new(TIME_IN_FORCE)
	*p = x
	return p
}

func (x TIME_IN_FORCE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TIME_IN_FORCE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[8].Descriptor()
}

func (TIME_IN_FORCE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[8]
}

func (x TIME_IN_FORCE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TIME_IN_FORCE.Descriptor instead.
func (TIME_IN_FORCE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{8}
}

type WORKING_TYPE int32

const (
	WORKING_TYPE_WORKING_TYPE_UNREQUIRED WORKING_TYPE = 0
	WORKING_TYPE_MARK_PRICE              WORKING_TYPE = 1
	WORKING_TYPE_CONTRACT_PRICE          WORKING_TYPE = 2
)

// Enum value maps for WORKING_TYPE.
var (
	WORKING_TYPE_name = map[int32]string{
		0: "WORKING_TYPE_UNREQUIRED",
		1: "MARK_PRICE",
		2: "CONTRACT_PRICE",
	}
	WORKING_TYPE_value = map[string]int32{
		"WORKING_TYPE_UNREQUIRED": 0,
		"MARK_PRICE":              1,
		"CONTRACT_PRICE":          2,
	}
)

func (x WORKING_TYPE) Enum() *WORKING_TYPE {
	p := new(WORKING_TYPE)
	*p = x
	return p
}

func (x WORKING_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WORKING_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[9].Descriptor()
}

func (WORKING_TYPE) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[9]
}

func (x WORKING_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WORKING_TYPE.Descriptor instead.
func (WORKING_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{9}
}

type EXECUTION_STRATEGY int32

const (
	EXECUTION_STRATEGY_DMA_LIMIT                   EXECUTION_STRATEGY = 0
	EXECUTION_STRATEGY_DMA_MARKET                  EXECUTION_STRATEGY = 1
	EXECUTION_STRATEGY_DCA_FIRST_MARKET_REST_LIMIT EXECUTION_STRATEGY = 2
	EXECUTION_STRATEGY_DCA_ALL_LIMIT               EXECUTION_STRATEGY = 3
	EXECUTION_STRATEGY_TWAP                        EXECUTION_STRATEGY = 4
	EXECUTION_STRATEGY_VWAP                        EXECUTION_STRATEGY = 5
)

// Enum value maps for EXECUTION_STRATEGY.
var (
	EXECUTION_STRATEGY_name = map[int32]string{
		0: "DMA_LIMIT",
		1: "DMA_MARKET",
		2: "DCA_FIRST_MARKET_REST_LIMIT",
		3: "DCA_ALL_LIMIT",
		4: "TWAP",
		5: "VWAP",
	}
	EXECUTION_STRATEGY_value = map[string]int32{
		"DMA_LIMIT":                   0,
		"DMA_MARKET":                  1,
		"DCA_FIRST_MARKET_REST_LIMIT": 2,
		"DCA_ALL_LIMIT":               3,
		"TWAP":                        4,
		"VWAP":                        5,
	}
)

func (x EXECUTION_STRATEGY) Enum() *EXECUTION_STRATEGY {
	p := new(EXECUTION_STRATEGY)
	*p = x
	return p
}

func (x EXECUTION_STRATEGY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EXECUTION_STRATEGY) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[10].Descriptor()
}

func (EXECUTION_STRATEGY) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[10]
}

func (x EXECUTION_STRATEGY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EXECUTION_STRATEGY.Descriptor instead.
func (EXECUTION_STRATEGY) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{10}
}

type DCA_EXECUTION_STRATEGY int32

const (
	DCA_EXECUTION_STRATEGY_CONSTANT    DCA_EXECUTION_STRATEGY = 0
	DCA_EXECUTION_STRATEGY_LINEAR      DCA_EXECUTION_STRATEGY = 1
	DCA_EXECUTION_STRATEGY_EXPONENTIAL DCA_EXECUTION_STRATEGY = 2
)

// Enum value maps for DCA_EXECUTION_STRATEGY.
var (
	DCA_EXECUTION_STRATEGY_name = map[int32]string{
		0: "CONSTANT",
		1: "LINEAR",
		2: "EXPONENTIAL",
	}
	DCA_EXECUTION_STRATEGY_value = map[string]int32{
		"CONSTANT":    0,
		"LINEAR":      1,
		"EXPONENTIAL": 2,
	}
)

func (x DCA_EXECUTION_STRATEGY) Enum() *DCA_EXECUTION_STRATEGY {
	p := new(DCA_EXECUTION_STRATEGY)
	*p = x
	return p
}

func (x DCA_EXECUTION_STRATEGY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DCA_EXECUTION_STRATEGY) Descriptor() protoreflect.EnumDescriptor {
	return file_service_trade_engine_proto_tradeengine_proto_enumTypes[11].Descriptor()
}

func (DCA_EXECUTION_STRATEGY) Type() protoreflect.EnumType {
	return &file_service_trade_engine_proto_tradeengine_proto_enumTypes[11]
}

func (x DCA_EXECUTION_STRATEGY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DCA_EXECUTION_STRATEGY.Descriptor instead.
func (DCA_EXECUTION_STRATEGY) EnumDescriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{11}
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId            string          `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ActorId            string          `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	Instrument         string          `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Asset              string          `protobuf:"bytes,20,opt,name=asset,proto3" json:"asset,omitempty"`
	Pair               TRADE_PAIR      `protobuf:"varint,4,opt,name=pair,proto3,enum=TRADE_PAIR" json:"pair,omitempty"`
	OrderType          ORDER_TYPE      `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=ORDER_TYPE" json:"order_type,omitempty"`
	TradeSide          TRADE_SIDE      `protobuf:"varint,7,opt,name=trade_side,json=tradeSide,proto3,enum=TRADE_SIDE" json:"trade_side,omitempty"`
	LimitPrice         float32         `protobuf:"fixed32,8,opt,name=limit_price,json=limitPrice,proto3" json:"limit_price,omitempty"`
	StopPrice          float32         `protobuf:"fixed32,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	Quantity           float32         `protobuf:"fixed32,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	TimeInForce        TIME_IN_FORCE   `protobuf:"varint,11,opt,name=time_in_force,json=timeInForce,proto3,enum=TIME_IN_FORCE" json:"time_in_force,omitempty"`
	PostOnly           bool            `protobuf:"varint,12,opt,name=post_only,json=postOnly,proto3" json:"post_only,omitempty"`
	ReduceOnly         bool            `protobuf:"varint,13,opt,name=reduce_only,json=reduceOnly,proto3" json:"reduce_only,omitempty"`
	WorkingType        WORKING_TYPE    `protobuf:"varint,14,opt,name=working_type,json=workingType,proto3,enum=WORKING_TYPE" json:"working_type,omitempty"`
	Venue              VENUE           `protobuf:"varint,15,opt,name=venue,proto3,enum=VENUE" json:"venue,omitempty"`
	CreatedTimestamp   int64           `protobuf:"varint,16,opt,name=created_timestamp,json=createdTimestamp,proto3" json:"created_timestamp,omitempty"`
	ExecutionTimestamp int64           `protobuf:"varint,21,opt,name=execution_timestamp,json=executionTimestamp,proto3" json:"execution_timestamp,omitempty"`
	ExternalOrderId    string          `protobuf:"bytes,17,opt,name=external_order_id,json=externalOrderId,proto3" json:"external_order_id,omitempty"`
	ClosePosition      bool            `protobuf:"varint,18,opt,name=close_position,json=closePosition,proto3" json:"close_position,omitempty"`
	InstrumentType     INSTRUMENT_TYPE `protobuf:"varint,19,opt,name=instrument_type,json=instrumentType,proto3,enum=INSTRUMENT_TYPE" json:"instrument_type,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *Order) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *Order) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Order) GetPair() TRADE_PAIR {
	if x != nil {
		return x.Pair
	}
	return TRADE_PAIR_USDT
}

func (x *Order) GetOrderType() ORDER_TYPE {
	if x != nil {
		return x.OrderType
	}
	return ORDER_TYPE_LIMIT
}

func (x *Order) GetTradeSide() TRADE_SIDE {
	if x != nil {
		return x.TradeSide
	}
	return TRADE_SIDE_BUY
}

func (x *Order) GetLimitPrice() float32 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *Order) GetStopPrice() float32 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *Order) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetTimeInForce() TIME_IN_FORCE {
	if x != nil {
		return x.TimeInForce
	}
	return TIME_IN_FORCE_TIME_IN_FORCE_UNREQUIRED
}

func (x *Order) GetPostOnly() bool {
	if x != nil {
		return x.PostOnly
	}
	return false
}

func (x *Order) GetReduceOnly() bool {
	if x != nil {
		return x.ReduceOnly
	}
	return false
}

func (x *Order) GetWorkingType() WORKING_TYPE {
	if x != nil {
		return x.WorkingType
	}
	return WORKING_TYPE_WORKING_TYPE_UNREQUIRED
}

func (x *Order) GetVenue() VENUE {
	if x != nil {
		return x.Venue
	}
	return VENUE_UNREQUIRED
}

func (x *Order) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

func (x *Order) GetExecutionTimestamp() int64 {
	if x != nil {
		return x.ExecutionTimestamp
	}
	return 0
}

func (x *Order) GetExternalOrderId() string {
	if x != nil {
		return x.ExternalOrderId
	}
	return ""
}

func (x *Order) GetClosePosition() bool {
	if x != nil {
		return x.ClosePosition
	}
	return false
}

func (x *Order) GetInstrumentType() INSTRUMENT_TYPE {
	if x != nil {
		return x.InstrumentType
	}
	return INSTRUMENT_TYPE_SPOT
}

type TradeStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeStrategyId    string                 `protobuf:"bytes,1,opt,name=trade_strategy_id,json=tradeStrategyId,proto3" json:"trade_strategy_id,omitempty"`
	ActorId            string                 `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	HumanizedActorName string                 `protobuf:"bytes,7,opt,name=humanized_actor_name,json=humanizedActorName,proto3" json:"humanized_actor_name,omitempty"`
	ActorType          ACTOR_TYPE             `protobuf:"varint,3,opt,name=actor_type,json=actorType,proto3,enum=ACTOR_TYPE" json:"actor_type,omitempty"`
	IdempotencyKey     string                 `protobuf:"bytes,4,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	ExecutionStrategy  EXECUTION_STRATEGY     `protobuf:"varint,5,opt,name=execution_strategy,json=executionStrategy,proto3,enum=EXECUTION_STRATEGY" json:"execution_strategy,omitempty"`
	Instrument         string                 `protobuf:"bytes,19,opt,name=instrument,proto3" json:"instrument,omitempty"`
	InstrumentType     INSTRUMENT_TYPE        `protobuf:"varint,6,opt,name=instrument_type,json=instrumentType,proto3,enum=INSTRUMENT_TYPE" json:"instrument_type,omitempty"`
	Asset              string                 `protobuf:"bytes,8,opt,name=asset,proto3" json:"asset,omitempty"`
	Pair               TRADE_PAIR             `protobuf:"varint,9,opt,name=pair,proto3,enum=TRADE_PAIR" json:"pair,omitempty"`
	Entries            []float32              `protobuf:"fixed32,10,rep,packed,name=entries,proto3" json:"entries,omitempty"`
	StopLoss           float32                `protobuf:"fixed32,11,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	TakeProfits        []float32              `protobuf:"fixed32,12,rep,packed,name=take_profits,json=takeProfits,proto3" json:"take_profits,omitempty"`
	Status             TRADE_STRATEGY_STATUS  `protobuf:"varint,13,opt,name=status,proto3,enum=TRADE_STRATEGY_STATUS" json:"status,omitempty"`
	Created            *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdated        *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	TradeSide          TRADE_SIDE             `protobuf:"varint,17,opt,name=trade_side,json=tradeSide,proto3,enum=TRADE_SIDE" json:"trade_side,omitempty"`
	CurrentPrice       float32                `protobuf:"fixed32,18,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	TradeableVenues    []VENUE                `protobuf:"varint,20,rep,packed,name=tradeable_venues,json=tradeableVenues,proto3,enum=VENUE" json:"tradeable_venues,omitempty"`
}

func (x *TradeStrategy) Reset() {
	*x = TradeStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeStrategy) ProtoMessage() {}

func (x *TradeStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeStrategy.ProtoReflect.Descriptor instead.
func (*TradeStrategy) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{1}
}

func (x *TradeStrategy) GetTradeStrategyId() string {
	if x != nil {
		return x.TradeStrategyId
	}
	return ""
}

func (x *TradeStrategy) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *TradeStrategy) GetHumanizedActorName() string {
	if x != nil {
		return x.HumanizedActorName
	}
	return ""
}

func (x *TradeStrategy) GetActorType() ACTOR_TYPE {
	if x != nil {
		return x.ActorType
	}
	return ACTOR_TYPE_AUTOMATED
}

func (x *TradeStrategy) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

func (x *TradeStrategy) GetExecutionStrategy() EXECUTION_STRATEGY {
	if x != nil {
		return x.ExecutionStrategy
	}
	return EXECUTION_STRATEGY_DMA_LIMIT
}

func (x *TradeStrategy) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *TradeStrategy) GetInstrumentType() INSTRUMENT_TYPE {
	if x != nil {
		return x.InstrumentType
	}
	return INSTRUMENT_TYPE_SPOT
}

func (x *TradeStrategy) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *TradeStrategy) GetPair() TRADE_PAIR {
	if x != nil {
		return x.Pair
	}
	return TRADE_PAIR_USDT
}

func (x *TradeStrategy) GetEntries() []float32 {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TradeStrategy) GetStopLoss() float32 {
	if x != nil {
		return x.StopLoss
	}
	return 0
}

func (x *TradeStrategy) GetTakeProfits() []float32 {
	if x != nil {
		return x.TakeProfits
	}
	return nil
}

func (x *TradeStrategy) GetStatus() TRADE_STRATEGY_STATUS {
	if x != nil {
		return x.Status
	}
	return TRADE_STRATEGY_STATUS_NEW
}

func (x *TradeStrategy) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TradeStrategy) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *TradeStrategy) GetTradeSide() TRADE_SIDE {
	if x != nil {
		return x.TradeSide
	}
	return TRADE_SIDE_BUY
}

func (x *TradeStrategy) GetCurrentPrice() float32 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *TradeStrategy) GetTradeableVenues() []VENUE {
	if x != nil {
		return x.TradeableVenues
	}
	return nil
}

type CreateTradeStrategyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeStrategy *TradeStrategy `protobuf:"bytes,1,opt,name=trade_strategy,json=tradeStrategy,proto3" json:"trade_strategy,omitempty"`
}

func (x *CreateTradeStrategyRequest) Reset() {
	*x = CreateTradeStrategyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeStrategyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeStrategyRequest) ProtoMessage() {}

func (x *CreateTradeStrategyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeStrategyRequest.ProtoReflect.Descriptor instead.
func (*CreateTradeStrategyRequest) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTradeStrategyRequest) GetTradeStrategy() *TradeStrategy {
	if x != nil {
		return x.TradeStrategy
	}
	return nil
}

type CreateTradeStrategyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeStrategyId string                 `protobuf:"bytes,1,opt,name=trade_strategy_id,json=tradeStrategyId,proto3" json:"trade_strategy_id,omitempty"`
	Created         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateTradeStrategyResponse) Reset() {
	*x = CreateTradeStrategyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTradeStrategyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTradeStrategyResponse) ProtoMessage() {}

func (x *CreateTradeStrategyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTradeStrategyResponse.ProtoReflect.Descriptor instead.
func (*CreateTradeStrategyResponse) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTradeStrategyResponse) GetTradeStrategyId() string {
	if x != nil {
		return x.TradeStrategyId
	}
	return ""
}

func (x *CreateTradeStrategyResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type ExecuteTradeStrategyForParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId         string  `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	UserId          string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TradeStrategyId string  `protobuf:"bytes,3,opt,name=trade_strategy_id,json=tradeStrategyId,proto3" json:"trade_strategy_id,omitempty"`
	Size            float32 `protobuf:"fixed32,5,opt,name=size,proto3" json:"size,omitempty"`
	Venue           VENUE   `protobuf:"varint,6,opt,name=venue,proto3,enum=VENUE" json:"venue,omitempty"`
	IsBot           bool    `protobuf:"varint,7,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	Risk            float32 `protobuf:"fixed32,8,opt,name=risk,proto3" json:"risk,omitempty"`
}

func (x *ExecuteTradeStrategyForParticipantRequest) Reset() {
	*x = ExecuteTradeStrategyForParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTradeStrategyForParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTradeStrategyForParticipantRequest) ProtoMessage() {}

func (x *ExecuteTradeStrategyForParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTradeStrategyForParticipantRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTradeStrategyForParticipantRequest) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetTradeStrategyId() string {
	if x != nil {
		return x.TradeStrategyId
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetVenue() VENUE {
	if x != nil {
		return x.Venue
	}
	return VENUE_UNREQUIRED
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *ExecuteTradeStrategyForParticipantRequest) GetRisk() float32 {
	if x != nil {
		return x.Risk
	}
	return 0
}

type ExecutionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	FailedOrder  *Order `protobuf:"bytes,2,opt,name=failed_order,json=failedOrder,proto3" json:"failed_order,omitempty"`
}

func (x *ExecutionError) Reset() {
	*x = ExecutionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionError) ProtoMessage() {}

func (x *ExecutionError) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionError.ProtoReflect.Descriptor instead.
func (*ExecutionError) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutionError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExecutionError) GetFailedOrder() *Order {
	if x != nil {
		return x.FailedOrder
	}
	return nil
}

type ExecuteTradeStrategyForParticipantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotionalSizeIsUsd      float32                `protobuf:"fixed32,1,opt,name=notional_size_is_usd,json=notionalSizeIsUsd,proto3" json:"notional_size_is_usd,omitempty"`
	Venue                  VENUE                  `protobuf:"varint,2,opt,name=venue,proto3,enum=VENUE" json:"venue,omitempty"`
	NumberOfExecutedOrders int64                  `protobuf:"varint,3,opt,name=number_of_executed_orders,json=numberOfExecutedOrders,proto3" json:"number_of_executed_orders,omitempty"`
	ExecutionStrategy      EXECUTION_STRATEGY     `protobuf:"varint,4,opt,name=execution_strategy,json=executionStrategy,proto3,enum=EXECUTION_STRATEGY" json:"execution_strategy,omitempty"`
	SuccessfulOrders       []*Order               `protobuf:"bytes,5,rep,name=successful_orders,json=successfulOrders,proto3" json:"successful_orders,omitempty"`
	Timestamp              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Error                  *ExecutionError        `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	TradeParticipantId     string                 `protobuf:"bytes,8,opt,name=trade_participant_id,json=tradeParticipantId,proto3" json:"trade_participant_id,omitempty"`
	Asset                  string                 `protobuf:"bytes,9,opt,name=asset,proto3" json:"asset,omitempty"`
	Pair                   TRADE_PAIR             `protobuf:"varint,10,opt,name=pair,proto3,enum=TRADE_PAIR" json:"pair,omitempty"`
	Instrument             string                 `protobuf:"bytes,11,opt,name=instrument,proto3" json:"instrument,omitempty"`
	InstrumentType         INSTRUMENT_TYPE        `protobuf:"varint,12,opt,name=instrument_type,json=instrumentType,proto3,enum=INSTRUMENT_TYPE" json:"instrument_type,omitempty"`
}

func (x *ExecuteTradeStrategyForParticipantResponse) Reset() {
	*x = ExecuteTradeStrategyForParticipantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTradeStrategyForParticipantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTradeStrategyForParticipantResponse) ProtoMessage() {}

func (x *ExecuteTradeStrategyForParticipantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTradeStrategyForParticipantResponse.ProtoReflect.Descriptor instead.
func (*ExecuteTradeStrategyForParticipantResponse) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetNotionalSizeIsUsd() float32 {
	if x != nil {
		return x.NotionalSizeIsUsd
	}
	return 0
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetVenue() VENUE {
	if x != nil {
		return x.Venue
	}
	return VENUE_UNREQUIRED
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetNumberOfExecutedOrders() int64 {
	if x != nil {
		return x.NumberOfExecutedOrders
	}
	return 0
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetExecutionStrategy() EXECUTION_STRATEGY {
	if x != nil {
		return x.ExecutionStrategy
	}
	return EXECUTION_STRATEGY_DMA_LIMIT
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetSuccessfulOrders() []*Order {
	if x != nil {
		return x.SuccessfulOrders
	}
	return nil
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetError() *ExecutionError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetTradeParticipantId() string {
	if x != nil {
		return x.TradeParticipantId
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetPair() TRADE_PAIR {
	if x != nil {
		return x.Pair
	}
	return TRADE_PAIR_USDT
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *ExecuteTradeStrategyForParticipantResponse) GetInstrumentType() INSTRUMENT_TYPE {
	if x != nil {
		return x.InstrumentType
	}
	return INSTRUMENT_TYPE_SPOT
}

type ReadTradeStrategyByTradeStrategyIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeStrategyId string `protobuf:"bytes,1,opt,name=trade_strategy_id,json=tradeStrategyId,proto3" json:"trade_strategy_id,omitempty"`
}

func (x *ReadTradeStrategyByTradeStrategyIDRequest) Reset() {
	*x = ReadTradeStrategyByTradeStrategyIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTradeStrategyByTradeStrategyIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTradeStrategyByTradeStrategyIDRequest) ProtoMessage() {}

func (x *ReadTradeStrategyByTradeStrategyIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTradeStrategyByTradeStrategyIDRequest.ProtoReflect.Descriptor instead.
func (*ReadTradeStrategyByTradeStrategyIDRequest) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{7}
}

func (x *ReadTradeStrategyByTradeStrategyIDRequest) GetTradeStrategyId() string {
	if x != nil {
		return x.TradeStrategyId
	}
	return ""
}

type ReadTradeStrategyByTradeStrategyIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeStrategy *TradeStrategy `protobuf:"bytes,1,opt,name=trade_strategy,json=tradeStrategy,proto3" json:"trade_strategy,omitempty"`
}

func (x *ReadTradeStrategyByTradeStrategyIDResponse) Reset() {
	*x = ReadTradeStrategyByTradeStrategyIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadTradeStrategyByTradeStrategyIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadTradeStrategyByTradeStrategyIDResponse) ProtoMessage() {}

func (x *ReadTradeStrategyByTradeStrategyIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadTradeStrategyByTradeStrategyIDResponse.ProtoReflect.Descriptor instead.
func (*ReadTradeStrategyByTradeStrategyIDResponse) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{8}
}

func (x *ReadTradeStrategyByTradeStrategyIDResponse) GetTradeStrategy() *TradeStrategy {
	if x != nil {
		return x.TradeStrategy
	}
	return nil
}

type VenueCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Venue      VENUE  `protobuf:"varint,1,opt,name=venue,proto3,enum=VENUE" json:"venue,omitempty"`
	ApiKey     string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	SecretKey  string `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Passphrase string `protobuf:"bytes,4,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Subaccount string `protobuf:"bytes,5,opt,name=subaccount,proto3" json:"subaccount,omitempty"`
	Url        string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	WsUrl      string `protobuf:"bytes,7,opt,name=ws_url,json=wsUrl,proto3" json:"ws_url,omitempty"`
}

func (x *VenueCredentials) Reset() {
	*x = VenueCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VenueCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VenueCredentials) ProtoMessage() {}

func (x *VenueCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VenueCredentials.ProtoReflect.Descriptor instead.
func (*VenueCredentials) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{9}
}

func (x *VenueCredentials) GetVenue() VENUE {
	if x != nil {
		return x.Venue
	}
	return VENUE_UNREQUIRED
}

func (x *VenueCredentials) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *VenueCredentials) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *VenueCredentials) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

func (x *VenueCredentials) GetSubaccount() string {
	if x != nil {
		return x.Subaccount
	}
	return ""
}

func (x *VenueCredentials) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VenueCredentials) GetWsUrl() string {
	if x != nil {
		return x.WsUrl
	}
	return ""
}

type ListAvailableVenuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAvailableVenuesRequest) Reset() {
	*x = ListAvailableVenuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableVenuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableVenuesRequest) ProtoMessage() {}

func (x *ListAvailableVenuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableVenuesRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableVenuesRequest) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{10}
}

type ListAvailableVenuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Venues []VENUE `protobuf:"varint,1,rep,packed,name=venues,proto3,enum=VENUE" json:"venues,omitempty"`
}

func (x *ListAvailableVenuesResponse) Reset() {
	*x = ListAvailableVenuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableVenuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableVenuesResponse) ProtoMessage() {}

func (x *ListAvailableVenuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_trade_engine_proto_tradeengine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableVenuesResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableVenuesResponse) Descriptor() ([]byte, []int) {
	return file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP(), []int{11}
}

func (x *ListAvailableVenuesResponse) GetVenues() []VENUE {
	if x != nil {
		return x.Venues
	}
	return nil
}

var File_service_trade_engine_proto_tradeengine_proto protoreflect.FileDescriptor

var file_service_trade_engine_proto_tradeengine_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf6, 0x05, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e,
	0x56, 0x45, 0x4e, 0x55, 0x45, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x06, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x6b,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x56, 0x45, 0x4e, 0x55, 0x45,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x22, 0x53, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x7f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe8, 0x01, 0x0a, 0x29, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x56, 0x45, 0x4e, 0x55, 0x45,
	0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x69,
	0x73, 0x6b, 0x22, 0x60, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xd4, 0x04, 0x0a, 0x2a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x49,
	0x73, 0x55, 0x73, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x52, 0x05, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a,
	0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x45, 0x58, 0x45, 0x43,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x52, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x33, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x49, 0x4e, 0x53, 0x54,
	0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x29, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x2a, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06, 0x2e,
	0x56, 0x45, 0x4e, 0x55, 0x45, 0x52, 0x05, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x1c, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x06, 0x2e, 0x56, 0x45, 0x4e,
	0x55, 0x45, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x2a, 0x32, 0x0a, 0x05, 0x56, 0x45,
	0x4e, 0x55, 0x45, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x52, 0x49, 0x42, 0x49, 0x54, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x46, 0x49, 0x4e, 0x45, 0x58, 0x10, 0x04, 0x2a, 0x43,
	0x0a, 0x0a, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x44,
	0x45, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x2a, 0xac, 0x01, 0x0a, 0x0c, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x49, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x60, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x50, 0x45,
	0x54, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x05, 0x2a, 0x3b, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x50,
	0x41, 0x49, 0x52, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x44, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x55, 0x53, 0x44, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x54, 0x48,
	0x10, 0x04, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x4b,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x4b, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x06, 0x2a, 0x89, 0x01, 0x0a, 0x0d, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54,
	0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x4f,
	0x0a, 0x0c, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x1b,
	0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x2a,
	0x7b, 0x0a, 0x12, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4d, 0x41, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4d, 0x41, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x43, 0x41, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x43, 0x41, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x57, 0x41, 0x50,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x57, 0x41, 0x50, 0x10, 0x05, 0x2a, 0x43, 0x0a, 0x16,
	0x44, 0x43, 0x41, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x32, 0xb7, 0x03, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x52, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1b, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x22, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x22, 0x52, 0x65, 0x61, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x75, 0x65, 0x73, 0x12, 0x1b,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65,
	0x6e, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x73, 0x68, 0x61, 0x6a,
	0x64, 0x6e, 0x2f, 0x73, 0x61, 0x73, 0x68, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_trade_engine_proto_tradeengine_proto_rawDescOnce sync.Once
	file_service_trade_engine_proto_tradeengine_proto_rawDescData = file_service_trade_engine_proto_tradeengine_proto_rawDesc
)

func file_service_trade_engine_proto_tradeengine_proto_rawDescGZIP() []byte {
	file_service_trade_engine_proto_tradeengine_proto_rawDescOnce.Do(func() {
		file_service_trade_engine_proto_tradeengine_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_trade_engine_proto_tradeengine_proto_rawDescData)
	})
	return file_service_trade_engine_proto_tradeengine_proto_rawDescData
}

var file_service_trade_engine_proto_tradeengine_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_service_trade_engine_proto_tradeengine_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_service_trade_engine_proto_tradeengine_proto_goTypes = []interface{}{
	(VENUE)(0),                          // 0: VENUE
	(ACTOR_TYPE)(0),                     // 1: ACTOR_TYPE
	(TRADE_SIDE)(0),                     // 2: TRADE_SIDE
	(ORDER_STATUS)(0),                   // 3: ORDER_STATUS
	(TRADE_STRATEGY_STATUS)(0),          // 4: TRADE_STRATEGY_STATUS
	(INSTRUMENT_TYPE)(0),                // 5: INSTRUMENT_TYPE
	(TRADE_PAIR)(0),                     // 6: TRADE_PAIR
	(ORDER_TYPE)(0),                     // 7: ORDER_TYPE
	(TIME_IN_FORCE)(0),                  // 8: TIME_IN_FORCE
	(WORKING_TYPE)(0),                   // 9: WORKING_TYPE
	(EXECUTION_STRATEGY)(0),             // 10: EXECUTION_STRATEGY
	(DCA_EXECUTION_STRATEGY)(0),         // 11: DCA_EXECUTION_STRATEGY
	(*Order)(nil),                       // 12: Order
	(*TradeStrategy)(nil),               // 13: TradeStrategy
	(*CreateTradeStrategyRequest)(nil),  // 14: CreateTradeStrategyRequest
	(*CreateTradeStrategyResponse)(nil), // 15: CreateTradeStrategyResponse
	(*ExecuteTradeStrategyForParticipantRequest)(nil),  // 16: ExecuteTradeStrategyForParticipantRequest
	(*ExecutionError)(nil),                             // 17: ExecutionError
	(*ExecuteTradeStrategyForParticipantResponse)(nil), // 18: ExecuteTradeStrategyForParticipantResponse
	(*ReadTradeStrategyByTradeStrategyIDRequest)(nil),  // 19: ReadTradeStrategyByTradeStrategyIDRequest
	(*ReadTradeStrategyByTradeStrategyIDResponse)(nil), // 20: ReadTradeStrategyByTradeStrategyIDResponse
	(*VenueCredentials)(nil),                           // 21: VenueCredentials
	(*ListAvailableVenuesRequest)(nil),                 // 22: ListAvailableVenuesRequest
	(*ListAvailableVenuesResponse)(nil),                // 23: ListAvailableVenuesResponse
	(*timestamppb.Timestamp)(nil),                      // 24: google.protobuf.Timestamp
}
var file_service_trade_engine_proto_tradeengine_proto_depIdxs = []int32{
	6,  // 0: Order.pair:type_name -> TRADE_PAIR
	7,  // 1: Order.order_type:type_name -> ORDER_TYPE
	2,  // 2: Order.trade_side:type_name -> TRADE_SIDE
	8,  // 3: Order.time_in_force:type_name -> TIME_IN_FORCE
	9,  // 4: Order.working_type:type_name -> WORKING_TYPE
	0,  // 5: Order.venue:type_name -> VENUE
	5,  // 6: Order.instrument_type:type_name -> INSTRUMENT_TYPE
	1,  // 7: TradeStrategy.actor_type:type_name -> ACTOR_TYPE
	10, // 8: TradeStrategy.execution_strategy:type_name -> EXECUTION_STRATEGY
	5,  // 9: TradeStrategy.instrument_type:type_name -> INSTRUMENT_TYPE
	6,  // 10: TradeStrategy.pair:type_name -> TRADE_PAIR
	4,  // 11: TradeStrategy.status:type_name -> TRADE_STRATEGY_STATUS
	24, // 12: TradeStrategy.created:type_name -> google.protobuf.Timestamp
	24, // 13: TradeStrategy.last_updated:type_name -> google.protobuf.Timestamp
	2,  // 14: TradeStrategy.trade_side:type_name -> TRADE_SIDE
	0,  // 15: TradeStrategy.tradeable_venues:type_name -> VENUE
	13, // 16: CreateTradeStrategyRequest.trade_strategy:type_name -> TradeStrategy
	24, // 17: CreateTradeStrategyResponse.created:type_name -> google.protobuf.Timestamp
	0,  // 18: ExecuteTradeStrategyForParticipantRequest.venue:type_name -> VENUE
	12, // 19: ExecutionError.failed_order:type_name -> Order
	0,  // 20: ExecuteTradeStrategyForParticipantResponse.venue:type_name -> VENUE
	10, // 21: ExecuteTradeStrategyForParticipantResponse.execution_strategy:type_name -> EXECUTION_STRATEGY
	12, // 22: ExecuteTradeStrategyForParticipantResponse.successful_orders:type_name -> Order
	24, // 23: ExecuteTradeStrategyForParticipantResponse.timestamp:type_name -> google.protobuf.Timestamp
	17, // 24: ExecuteTradeStrategyForParticipantResponse.error:type_name -> ExecutionError
	6,  // 25: ExecuteTradeStrategyForParticipantResponse.pair:type_name -> TRADE_PAIR
	5,  // 26: ExecuteTradeStrategyForParticipantResponse.instrument_type:type_name -> INSTRUMENT_TYPE
	13, // 27: ReadTradeStrategyByTradeStrategyIDResponse.trade_strategy:type_name -> TradeStrategy
	0,  // 28: VenueCredentials.venue:type_name -> VENUE
	0,  // 29: ListAvailableVenuesResponse.venues:type_name -> VENUE
	14, // 30: tradeengine.CreateTradeStrategy:input_type -> CreateTradeStrategyRequest
	16, // 31: tradeengine.ExecuteTradeStrategyForParticipant:input_type -> ExecuteTradeStrategyForParticipantRequest
	19, // 32: tradeengine.ReadTradeStrategyByTradeStrategyID:input_type -> ReadTradeStrategyByTradeStrategyIDRequest
	22, // 33: tradeengine.ListAvailableVenues:input_type -> ListAvailableVenuesRequest
	15, // 34: tradeengine.CreateTradeStrategy:output_type -> CreateTradeStrategyResponse
	18, // 35: tradeengine.ExecuteTradeStrategyForParticipant:output_type -> ExecuteTradeStrategyForParticipantResponse
	20, // 36: tradeengine.ReadTradeStrategyByTradeStrategyID:output_type -> ReadTradeStrategyByTradeStrategyIDResponse
	23, // 37: tradeengine.ListAvailableVenues:output_type -> ListAvailableVenuesResponse
	34, // [34:38] is the sub-list for method output_type
	30, // [30:34] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_service_trade_engine_proto_tradeengine_proto_init() }
func file_service_trade_engine_proto_tradeengine_proto_init() {
	if File_service_trade_engine_proto_tradeengine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeStrategyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTradeStrategyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTradeStrategyForParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTradeStrategyForParticipantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTradeStrategyByTradeStrategyIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadTradeStrategyByTradeStrategyIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VenueCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableVenuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_trade_engine_proto_tradeengine_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableVenuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_trade_engine_proto_tradeengine_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_trade_engine_proto_tradeengine_proto_goTypes,
		DependencyIndexes: file_service_trade_engine_proto_tradeengine_proto_depIdxs,
		EnumInfos:         file_service_trade_engine_proto_tradeengine_proto_enumTypes,
		MessageInfos:      file_service_trade_engine_proto_tradeengine_proto_msgTypes,
	}.Build()
	File_service_trade_engine_proto_tradeengine_proto = out.File
	file_service_trade_engine_proto_tradeengine_proto_rawDesc = nil
	file_service_trade_engine_proto_tradeengine_proto_goTypes = nil
	file_service_trade_engine_proto_tradeengine_proto_depIdxs = nil
}
