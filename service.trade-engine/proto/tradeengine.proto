syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "github.com/sashajdn/sasha/service.trade-engine/proto;tradeengineproto";

service tradeengine {
    rpc CreateTradeStrategy (CreateTradeStrategyRequest) returns (CreateTradeStrategyResponse) {}

    rpc ExecuteTradeStrategyForParticipant (ExecuteTradeStrategyForParticipantRequest) returns (ExecuteTradeStrategyForParticipantResponse) {}

    rpc ReadTradeStrategyByTradeStrategyID (ReadTradeStrategyByTradeStrategyIDRequest) returns (ReadTradeStrategyByTradeStrategyIDResponse) {}

    rpc ListAvailableVenues (ListAvailableVenuesRequest) returns (ListAvailableVenuesResponse) {}
}

enum VENUE {
    UNREQUIRED = 0;
    DERIBIT = 3;
    BITFINEX = 4;
}

enum ACTOR_TYPE {
    AUTOMATED = 0;
    MANUAL = 1;
    INTERNAL = 2;
    EXTERNAL = 3;
}

enum TRADE_SIDE {
    BUY = 0;
    SELL = 1;
    LONG = 2;
    SHORT = 3;
}

enum ORDER_STATUS {
    PENDING_NEW_ORDER = 0;
    NEW_ORDER = 1;
    PENDING_CANCEL_ORDER = 2;
    CANCELLED_ORDER = 3;
    PARTIALLY_FILLED_ORDER = 4;
    FILLED_ORDER = 5;
    REJECTED = 6;
    EXPIRED = 7;
}

enum TRADE_STRATEGY_STATUS {
    NEW = 0;
    ACTIVE = 1;
    COMPLETE = 2;
    CANCELLED = 3;
}

enum INSTRUMENT_TYPE {
    SPOT = 0;
    FUTURE_PERPETUAL = 1;
    FUTURE = 2;
    OPTION = 3;
    FORWARD = 4;
    MOVE = 5;
}

enum TRADE_PAIR {
    USDT = 0;
    USD = 1;
    BTC = 2;
    USDC = 3;
    ETH = 4;
}

enum ORDER_TYPE {
    LIMIT = 0;
    MARKET = 1;
    STOP_MARKET = 2;
    STOP_LIMIT = 3;
    TAKE_PROFIT_MARKET = 4;
    TAKE_PROFIT_LIMIT = 5;
    TRAILING_STOP_MARKET = 6;
}

enum TIME_IN_FORCE {
    TIME_IN_FORCE_UNREQUIRED = 0;
    GOOD_TILL_CANCELLED = 1;
    IMMEDIATE_OR_CANCEL = 2;
    FILL_OR_KILL = 3;
    GOOD_TILL_CROSSING = 4;
}

enum WORKING_TYPE {
    WORKING_TYPE_UNREQUIRED = 0;
    MARK_PRICE = 1;
    CONTRACT_PRICE = 2;
}

enum EXECUTION_STRATEGY {
    DMA_LIMIT = 0;
    DMA_MARKET = 1;
    DCA_FIRST_MARKET_REST_LIMIT = 2;
    DCA_ALL_LIMIT = 3;
    TWAP = 4;
    VWAP = 5;
}

enum DCA_EXECUTION_STRATEGY {
    CONSTANT = 0;
    LINEAR  = 1;
    EXPONENTIAL = 2;
}

message Order {
    string order_id = 1;
    string actor_id = 2;
    string instrument = 3;
    string asset = 20;
    TRADE_PAIR pair = 4;
    ORDER_TYPE order_type = 5;
    TRADE_SIDE trade_side = 7;
    float limit_price = 8;
    float stop_price = 9;
    float quantity = 10;
    TIME_IN_FORCE time_in_force = 11;
    bool post_only = 12;
    bool reduce_only = 13;
    WORKING_TYPE working_type = 14;
    VENUE venue = 15;
    int64 created_timestamp = 16;
    int64 execution_timestamp = 21;
    string external_order_id = 17;
    bool close_position = 18;
    INSTRUMENT_TYPE instrument_type = 19;
}

message TradeStrategy {
    string trade_strategy_id = 1;
    string actor_id = 2;
    string humanized_actor_name = 7;
    ACTOR_TYPE actor_type = 3;
    string idempotency_key = 4;
    EXECUTION_STRATEGY execution_strategy = 5;
    string instrument = 19;
    INSTRUMENT_TYPE instrument_type = 6;
    string asset = 8;
    TRADE_PAIR pair = 9;
    repeated float entries = 10;
    float stop_loss = 11;
    repeated float take_profits = 12;
    TRADE_STRATEGY_STATUS status = 13;
    google.protobuf.Timestamp created = 15;
    google.protobuf.Timestamp last_updated = 16;
    TRADE_SIDE trade_side = 17;
    float current_price = 18;
    repeated VENUE tradeable_venues = 20;
}

message CreateTradeStrategyRequest {
    TradeStrategy trade_strategy = 1;
}

message CreateTradeStrategyResponse {
    string trade_strategy_id = 1;
    google.protobuf.Timestamp created = 2;
}

message ExecuteTradeStrategyForParticipantRequest {
    string actor_id = 1;
    string user_id = 2;
    string trade_strategy_id = 3;
    float size = 5;
    VENUE venue = 6;
    bool is_bot = 7;
    float risk = 8;
}

message ExecutionError {
    string error_message = 1;
    Order failed_order = 2;
}

message ExecuteTradeStrategyForParticipantResponse {
    float notional_size_is_usd = 1;
    VENUE venue = 2;
    int64 number_of_executed_orders = 3;
    EXECUTION_STRATEGY execution_strategy = 4;
    repeated Order successful_orders = 5;
    google.protobuf.Timestamp timestamp = 6;
    ExecutionError error = 7;
    string trade_participant_id = 8;
    string asset = 9;
    TRADE_PAIR pair = 10;
    string instrument = 11;
    INSTRUMENT_TYPE instrument_type = 12;
}

message ReadTradeStrategyByTradeStrategyIDRequest {
    string trade_strategy_id = 1;
}

message ReadTradeStrategyByTradeStrategyIDResponse {
    TradeStrategy trade_strategy = 1;
}

message VenueCredentials {
    VENUE venue = 1;
    string api_key = 2;
    string secret_key = 3;
    string passphrase = 4;
    string subaccount = 5;
    string url = 6;
    string ws_url = 7;
}

message ListAvailableVenuesRequest{}

message ListAvailableVenuesResponse{
    repeated VENUE venues = 1;
}
