// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service.location-tracker/proto/locationtracker.proto

package locationtrackerproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationtrackerClient is the client API for Locationtracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationtrackerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
}

type locationtrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationtrackerClient(cc grpc.ClientConnInterface) LocationtrackerClient {
	return &locationtrackerClient{cc}
}

func (c *locationtrackerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/locationtracker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationtrackerClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/locationtracker/UpdateLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationtrackerServer is the server API for Locationtracker service.
// All implementations must embed UnimplementedLocationtrackerServer
// for forward compatibility
type LocationtrackerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	mustEmbedUnimplementedLocationtrackerServer()
}

// UnimplementedLocationtrackerServer must be embedded to have forward compatible implementations.
type UnimplementedLocationtrackerServer struct {
}

func (UnimplementedLocationtrackerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLocationtrackerServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedLocationtrackerServer) mustEmbedUnimplementedLocationtrackerServer() {}

// UnsafeLocationtrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationtrackerServer will
// result in compilation errors.
type UnsafeLocationtrackerServer interface {
	mustEmbedUnimplementedLocationtrackerServer()
}

func RegisterLocationtrackerServer(s grpc.ServiceRegistrar, srv LocationtrackerServer) {
	s.RegisterService(&Locationtracker_ServiceDesc, srv)
}

func _Locationtracker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationtrackerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locationtracker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationtrackerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locationtracker_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationtrackerServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/locationtracker/UpdateLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationtrackerServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Locationtracker_ServiceDesc is the grpc.ServiceDesc for Locationtracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locationtracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locationtracker",
	HandlerType: (*LocationtrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Locationtracker_Ping_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _Locationtracker_UpdateLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.location-tracker/proto/locationtracker.proto",
}
